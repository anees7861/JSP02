Few Pages shoudl exist after login, such as adding or editting a book. Add the following code to the requried jsp file

	<%
		// this will redirect the user to the login page if they have not logged in. 
		// Used to increase security
		
		if(session.getAttribute("un")==null)
			response.sendRedirect("login.jsp");
	
	
	%>


This code will be tedious to be implemented in multiple files, thus we use the concept of FILTER

FILTER checks is sessione exists or will redirect to the desired page. Filter will make this decision here.
Filter is a java file, it will implement a class named 'Filter'. Use the following code to do so

	@WebFilter(urlPatterns =  {"/registerbook.jsp","/update.jsp","/DeleteServlet"})
	public class LoginFilter implements Filter {

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		// TODO Auto-generated method stub
		// ServletRequest is a parent class to httpServletRequest, same for the response classes
		
		HttpServletRequest req =(HttpServletRequest) request;
		HttpServletResponse resp = (HttpServletResponse) response;
		
		if(req.getSession().getAttribute("un")==null) // this will check is the session is valid or not
			// only the child class can give the getSession() method
			resp.sendRedirect("login.jsp"); // if not it will send the user ti the login page
		
		chain.doFilter(req, resp); // this means to go to the next page after login, pages that are protected by filter
		// will be visible after login after mentioning this method
		
	}

}


There are roles played by the people on the website, they can be users or admin. Admins have special permissions to alter
the website but users are restricted from doing so. We make the following servlet to implement roles for the people 
on the website.

1. Create a user class so that every detail about user is stored in one session

	 private String user;
	 private String mail;
	 private String pass;
	 private String role;
	 
	 public String getUser() {
			return user;
		}
		public void setUser(String user) {
			this.user = user;
		}
		public String getMail() {
			return mail;
		}
		public void setMail(String mail) {
			this.mail = mail;
		}
		public String getPass() {
			return pass;
		}
		public void setPass(String pass) {
			this.pass = pass;
		}
		public String getRole() {
			return role;
		}
		public void setRole(String role) {
			this.role = role;
		}

2. Go on the login servelet and use the following code

		User u = new User();
		
		
		u.setUser(req.getParameter("user"));
		u.setPass(req.getParameter("pass"));
//		String user = req.getParameter("user");
//		String pass = req.getParameter("pass");
		
		try {
			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
			Connection con = DriverManager.getConnection("jdbc:sqlserver://localhost:64101;database=MyDB",
					"sa","123");
			PreparedStatement ps = con.prepareStatement("select * from users where username = ? and password = ?");
			ps.setString(1, u.getUser());
			ps.setString(2, u.getPass());
			ResultSet rs = ps.executeQuery();
			PrintWriter out = resp.getWriter();
			// commnet this bro 
			if(rs.next()) {
				
				// create a session to save user data
				// when  user logs in the data is saved and session is started
				// once they log out the session ends
				
				u.setMail(rs.getString("email"));
				u.setRole(rs.getString("role"));
				
				HttpSession hs = req.getSession();
				hs.setMaxInactiveInterval(120); // Specifies the session timeout duration in seconds
				hs.setAttribute("u", u); 
				// stores all of the users data in one attributer, instead of creating 4 separate
				// ones.
				
				out.println("<script>" // throw a pop up to show user has logged in
							+ "alert('Welcome User "+u.getUser()+"');" 
							+ "window.location='home.jsp';"
							+ "</script>");	
			}
			else
				out.println("<script>" // throw a pop up to show entered info is incorrect
							+ "alert('incorrect username or pass');" 
							+ "window.location='home.jsp';"
							+ "</script>");	
			
		}catch (Exception e) {
			// TODO: handle exception
			PrintWriter out = resp.getWriter();
			out.println(e);
		}

4. Change the login filter for allowing only the admin to access vital pages, use the following code

	@WebFilter(urlPatterns =  {"/registerbook.jsp","/update.jsp","/DeleteServlet"})
	public class LoginFilter implements Filter {
	
	// this will prevent users from accessing secured web pages, a login is required to access them
	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		// TODO Auto-generated method stub
		// ServletRequest is a parent class to httpServletRequest, same for the response classes
		
		HttpServletRequest req =(HttpServletRequest) request;
		HttpServletResponse resp = (HttpServletResponse) response;
		
		if(req.getSession().getAttribute("u")==null)
			resp.sendRedirect("login.jsp");
		else {	
			User u = (User)req.getSession().getAttribute("u");
			if(!u.getRole().equals("admin")) // this will check is the session is valid or not
				// only the child class can give the getSession() method
				// this will also check if the user is admin or not
				// if not they will be redirected to the login page until admin can login
				resp.sendRedirect("login.jsp"); // if not it will send the user ti the login page
		}
		
		
		chain.doFilter(req, resp); // this means to go to the next page after login, pages that are protected by filter
		// will be visible after login after mentioning this method
	}

}


